#pragma once
#include <ATen/Type.h>

namespace at {

struct CAFFE2_API TypeExtendedInterface : public Type {
  explicit TypeExtendedInterface(TensorTypeId type_id, bool is_variable, bool is_undefined)
      : Type(type_id, is_variable, is_undefined) {}
  virtual Tensor & _fill_(Tensor & self, Scalar value) const = 0;
  virtual Tensor & _fill_(Tensor & self, const Tensor & value) const = 0;
  virtual Tensor & s_masked_select_out(Tensor & result, const Tensor & self, const Tensor & mask) const = 0;
  virtual Tensor & masked_select_out(Tensor & result, const Tensor & self, const Tensor & mask) const = 0;
  virtual Tensor & nonzero_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor th_clone(const Tensor & self) const = 0;
  virtual Tensor & th_resize_as_(Tensor & self, const Tensor & the_template) const = 0;
  virtual Tensor & index_select_out(Tensor & result, const Tensor & self, int64_t dim, const Tensor & index) const = 0;
  virtual Tensor & _indexCopy_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) const = 0;
  virtual Tensor & take_out(Tensor & result, const Tensor & self, const Tensor & index) const = 0;
  virtual Tensor & _range_out(Tensor & result, Scalar start, Scalar end, Scalar step) const = 0;
  virtual Tensor _range(Scalar start, Scalar end, Scalar step) const = 0;
  virtual Tensor & _arange_out(Tensor & result, Scalar start, Scalar end, Scalar step) const = 0;
  virtual Tensor _arange(Scalar start, Scalar end, Scalar step) const = 0;
  virtual Tensor & _arange_out(Tensor & result, Scalar end) const = 0;
  virtual Tensor _arange(Scalar end) const = 0;
  virtual Tensor & gather_out(Tensor & result, const Tensor & self, int64_t dim, const Tensor & index) const = 0;
  virtual Tensor & __and___out(Tensor & result, const Tensor & self, Scalar other) const = 0;
  virtual Tensor & s___and___out(Tensor & result, const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & __and___out(Tensor & result, const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & __or___out(Tensor & result, const Tensor & self, Scalar other) const = 0;
  virtual Tensor & s___or___out(Tensor & result, const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & __or___out(Tensor & result, const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & __xor___out(Tensor & result, const Tensor & self, Scalar other) const = 0;
  virtual Tensor & s___xor___out(Tensor & result, const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & __xor___out(Tensor & result, const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & __lshift___out(Tensor & result, const Tensor & self, Scalar other) const = 0;
  virtual Tensor & s___lshift___out(Tensor & result, const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & __lshift___out(Tensor & result, const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & __rshift___out(Tensor & result, const Tensor & self, Scalar other) const = 0;
  virtual Tensor & s___rshift___out(Tensor & result, const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & __rshift___out(Tensor & result, const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & lt_out(Tensor & result, const Tensor & self, Scalar other) const = 0;
  virtual Tensor & s_lt_out(Tensor & result, const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & lt_out(Tensor & result, const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & gt_out(Tensor & result, const Tensor & self, Scalar other) const = 0;
  virtual Tensor & s_gt_out(Tensor & result, const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & gt_out(Tensor & result, const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & le_out(Tensor & result, const Tensor & self, Scalar other) const = 0;
  virtual Tensor & s_le_out(Tensor & result, const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & le_out(Tensor & result, const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & ge_out(Tensor & result, const Tensor & self, Scalar other) const = 0;
  virtual Tensor & s_ge_out(Tensor & result, const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & ge_out(Tensor & result, const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & eq_out(Tensor & result, const Tensor & self, Scalar other) const = 0;
  virtual Tensor & s_eq_out(Tensor & result, const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & eq_out(Tensor & result, const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & ne_out(Tensor & result, const Tensor & self, Scalar other) const = 0;
  virtual Tensor & s_ne_out(Tensor & result, const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & ne_out(Tensor & result, const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & s_min_out(Tensor & result, const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & min_out(Tensor & result, const Tensor & self, const Tensor & other) const = 0;
  virtual std::tuple<Tensor &,Tensor &> _th_min_out(Tensor & min, Tensor & min_indices, const Tensor & self, int64_t dim, bool keepdim) const = 0;
  virtual std::tuple<Tensor,Tensor> _th_min(const Tensor & self, int64_t dim, bool keepdim) const = 0;
  virtual Tensor & s_max_out(Tensor & result, const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & max_out(Tensor & result, const Tensor & self, const Tensor & other) const = 0;
  virtual std::tuple<Tensor &,Tensor &> _th_max_out(Tensor & max, Tensor & max_indices, const Tensor & self, int64_t dim, bool keepdim) const = 0;
  virtual std::tuple<Tensor,Tensor> _th_max(const Tensor & self, int64_t dim, bool keepdim) const = 0;
  virtual std::tuple<Tensor &,Tensor &> _th_kthvalue_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, int64_t dim, bool keepdim) const = 0;
  virtual std::tuple<Tensor,Tensor> _th_kthvalue(const Tensor & self, int64_t k, int64_t dim, bool keepdim) const = 0;
  virtual std::tuple<Tensor &,Tensor &> _th_mode_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim) const = 0;
  virtual std::tuple<Tensor,Tensor> _th_mode(const Tensor & self, int64_t dim, bool keepdim) const = 0;
  virtual std::tuple<Tensor &,Tensor &> _th_median_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim) const = 0;
  virtual std::tuple<Tensor,Tensor> _th_median(const Tensor & self, int64_t dim, bool keepdim) const = 0;
  virtual std::tuple<Tensor &,Tensor &> sort_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool descending) const = 0;
  virtual std::tuple<Tensor &,Tensor &> topk_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) const = 0;
  virtual Tensor & _th_all_out(Tensor & result, const Tensor & self, int64_t dim, bool keepdim) const = 0;
  virtual Tensor _th_all(const Tensor & self, int64_t dim, bool keepdim) const = 0;
  virtual Tensor & _th_any_out(Tensor & result, const Tensor & self, int64_t dim, bool keepdim) const = 0;
  virtual Tensor _th_any(const Tensor & self, int64_t dim, bool keepdim) const = 0;
  virtual int64_t _th_get_device(const Tensor & self) const = 0;
  virtual Tensor & _abs_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor _abs(const Tensor & self) const = 0;
  virtual Tensor & _th_sigmoid_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor _th_sigmoid(const Tensor & self) const = 0;
  virtual Tensor & _log_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor _log(const Tensor & self) const = 0;
  virtual Tensor & _log10_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor _log10(const Tensor & self) const = 0;
  virtual Tensor & _log1p_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor _log1p(const Tensor & self) const = 0;
  virtual Tensor & _log2_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor _log2(const Tensor & self) const = 0;
  virtual Tensor & lgamma_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor & digamma_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor & polygamma_out(Tensor & result, int64_t n, const Tensor & self) const = 0;
  virtual Tensor & _exp_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor _exp(const Tensor & self) const = 0;
  virtual Tensor & _expm1_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor _expm1(const Tensor & self) const = 0;
  virtual Tensor & _cos_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor _cos(const Tensor & self) const = 0;
  virtual Tensor & _acos_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor _acos(const Tensor & self) const = 0;
  virtual Tensor & _cosh_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor _cosh(const Tensor & self) const = 0;
  virtual Tensor & _sin_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor _sin(const Tensor & self) const = 0;
  virtual Tensor & _asin_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor _asin(const Tensor & self) const = 0;
  virtual Tensor & _sinh_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor _sinh(const Tensor & self) const = 0;
  virtual Tensor & _tan_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor _tan(const Tensor & self) const = 0;
  virtual Tensor & _atan_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor _atan(const Tensor & self) const = 0;
  virtual Tensor & _th_tanh_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor _th_tanh(const Tensor & self) const = 0;
  virtual Tensor & _erf_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor _erf(const Tensor & self) const = 0;
  virtual Tensor & _erfc_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor _erfc(const Tensor & self) const = 0;
  virtual Tensor & erfinv_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor & _sqrt_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor _sqrt(const Tensor & self) const = 0;
  virtual Tensor & _rsqrt_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor _rsqrt(const Tensor & self) const = 0;
  virtual Tensor & _ceil_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor _ceil(const Tensor & self) const = 0;
  virtual Tensor & _floor_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor _floor(const Tensor & self) const = 0;
  virtual Tensor & _round_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor _round(const Tensor & self) const = 0;
  virtual Tensor & _trunc_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor _trunc(const Tensor & self) const = 0;
  virtual Tensor & frac_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor & _th_var_out(Tensor & result, const Tensor & self, int64_t dim, bool unbiased, bool keepdim) const = 0;
  virtual Tensor _th_var(const Tensor & self, int64_t dim, bool unbiased, bool keepdim) const = 0;
  virtual Tensor _th_var(const Tensor & self, bool unbiased) const = 0;
  virtual Tensor & _th_std_out(Tensor & result, const Tensor & self, int64_t dim, bool unbiased, bool keepdim) const = 0;
  virtual Tensor _th_std(const Tensor & self, int64_t dim, bool unbiased, bool keepdim) const = 0;
  virtual Tensor _th_std(const Tensor & self, bool unbiased) const = 0;
  virtual Tensor th_norm(const Tensor & self, Scalar p) const = 0;
  virtual Tensor & _th_norm_out(Tensor & result, const Tensor & self, Scalar p, int64_t dim, bool keepdim) const = 0;
  virtual Tensor _th_norm(const Tensor & self, Scalar p, int64_t dim, bool keepdim) const = 0;
  virtual Tensor & renorm_out(Tensor & result, const Tensor & self, Scalar p, int64_t dim, Scalar maxnorm) const = 0;
  virtual Tensor & reciprocal_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor & neg_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor & s_atan2_out(Tensor & result, const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & atan2_out(Tensor & result, const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & th_pow_out(Tensor & result, const Tensor & self, Scalar exponent) const = 0;
  virtual Tensor th_pow(const Tensor & self, Scalar exponent) const = 0;
  virtual Tensor & s_pow_out(Tensor & result, const Tensor & self, const Tensor & exponent) const = 0;
  virtual Tensor & pow_out(Tensor & result, const Tensor & self, const Tensor & exponent) const = 0;
  virtual Tensor & pow_out(Tensor & result, Scalar self, const Tensor & exponent) const = 0;
  virtual Tensor & s_lerp_out(Tensor & result, const Tensor & self, const Tensor & end, Scalar weight) const = 0;
  virtual Tensor & lerp_out(Tensor & result, const Tensor & self, const Tensor & end, Scalar weight) const = 0;
  virtual Tensor & _linspace_out(Tensor & result, Scalar start, Scalar end, int64_t steps) const = 0;
  virtual Tensor _linspace(Scalar start, Scalar end, int64_t steps) const = 0;
  virtual Tensor & _logspace_out(Tensor & result, Scalar start, Scalar end, int64_t steps) const = 0;
  virtual Tensor _logspace(Scalar start, Scalar end, int64_t steps) const = 0;
  virtual Tensor & histc_out(Tensor & result, const Tensor & self, int64_t bins, Scalar min, Scalar max) const = 0;
  virtual Tensor & th_zero_(Tensor & self) const = 0;
  virtual Tensor _sumall(const Tensor & self) const = 0;
  virtual Tensor & _th_sum_out(Tensor & result, const Tensor & self, int64_t dim, bool keepdim) const = 0;
  virtual Tensor _th_sum(const Tensor & self, int64_t dim, bool keepdim) const = 0;
  virtual Tensor _prodall(const Tensor & self) const = 0;
  virtual Tensor & _th_prod_out(Tensor & result, const Tensor & self, int64_t dim, bool keepdim) const = 0;
  virtual Tensor _th_prod(const Tensor & self, int64_t dim, bool keepdim) const = 0;
  virtual Tensor & _cumsum_out(Tensor & result, const Tensor & self, int64_t dim) const = 0;
  virtual Tensor _cumsum(const Tensor & self, int64_t dim) const = 0;
  virtual Tensor & _cumprod_out(Tensor & result, const Tensor & self, int64_t dim) const = 0;
  virtual Tensor _cumprod(const Tensor & self, int64_t dim) const = 0;
  virtual Tensor & sign_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor & fmod_out(Tensor & result, const Tensor & self, Scalar other) const = 0;
  virtual Tensor & s_fmod_out(Tensor & result, const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & fmod_out(Tensor & result, const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & remainder_out(Tensor & result, const Tensor & self, Scalar other) const = 0;
  virtual Tensor & s_remainder_out(Tensor & result, const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & remainder_out(Tensor & result, const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & _th_clamp_out(Tensor & result, const Tensor & self, Scalar min, Scalar max) const = 0;
  virtual Tensor _th_clamp(const Tensor & self, Scalar min, Scalar max) const = 0;
  virtual Tensor & _th_clamp_min_out(Tensor & result, const Tensor & self, Scalar min) const = 0;
  virtual Tensor _th_clamp_min(const Tensor & self, Scalar min) const = 0;
  virtual Tensor & _th_clamp_max_out(Tensor & result, const Tensor & self, Scalar max) const = 0;
  virtual Tensor _th_clamp_max(const Tensor & self, Scalar max) const = 0;
  virtual Tensor _dot(const Tensor & self, const Tensor & tensor) const = 0;
  virtual Tensor & tril_out(Tensor & result, const Tensor & self, int64_t diagonal) const = 0;
  virtual Tensor & triu_out(Tensor & result, const Tensor & self, int64_t diagonal) const = 0;
  virtual Tensor & cross_out(Tensor & result, const Tensor & self, const Tensor & other, int64_t dim) const = 0;
  virtual Tensor & diag_out(Tensor & result, const Tensor & self, int64_t diagonal) const = 0;
  virtual Tensor & s_th_addmm_out(Tensor & result, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor & th_addmm_out(Tensor & result, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor s_th_addmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor th_addmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor & th_addmm_(Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor & s__addmv_out(Tensor & result, const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor & _addmv_out(Tensor & result, const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor s__addmv(const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor _addmv(const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor & _addmv_(Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor & s__addr_out(Tensor & result, const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor & _addr_out(Tensor & result, const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor s__addr(const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor _addr(const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor & _addr_(Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor & _ger_out(Tensor & result, const Tensor & self, const Tensor & vec2) const = 0;
  virtual Tensor _ger(const Tensor & self, const Tensor & vec2) const = 0;
  virtual Tensor & _mv_out(Tensor & result, const Tensor & self, const Tensor & vec) const = 0;
  virtual Tensor _mv(const Tensor & self, const Tensor & vec) const = 0;
  virtual Tensor & _mm_out(Tensor & result, const Tensor & self, const Tensor & mat2) const = 0;
  virtual Tensor _mm(const Tensor & self, const Tensor & mat2) const = 0;
  virtual Tensor & _th_bmm_out(Tensor & result, const Tensor & self, const Tensor & mat2) const = 0;
  virtual Tensor _th_bmm(const Tensor & self, const Tensor & mat2) const = 0;
  virtual Tensor & s_addbmm_out(Tensor & result, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor & addbmm_out(Tensor & result, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor & s__th_baddbmm_out(Tensor & result, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor & _th_baddbmm_out(Tensor & result, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor s__th_baddbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor _th_baddbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor & s_addcmul_out(Tensor & result, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const = 0;
  virtual Tensor & addcmul_out(Tensor & result, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const = 0;
  virtual Tensor & s_addcdiv_out(Tensor & result, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const = 0;
  virtual Tensor & addcdiv_out(Tensor & result, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const = 0;
  virtual std::tuple<Tensor &,Tensor &> _gesv_single_out(Tensor & solution, Tensor & lu, const Tensor & self, const Tensor & A) const = 0;
  virtual std::tuple<Tensor,Tensor> _gesv_single(const Tensor & self, const Tensor & A) const = 0;
  virtual std::tuple<Tensor &,Tensor &> gels_out(Tensor & res1, Tensor & res2, const Tensor & self, const Tensor & A) const = 0;
  virtual std::tuple<Tensor &,Tensor &> trtrs_out(Tensor & res1, Tensor & res2, const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular) const = 0;
  virtual std::tuple<Tensor &,Tensor &> symeig_out(Tensor & res1, Tensor & res2, const Tensor & self, bool eigenvectors, bool upper) const = 0;
  virtual std::tuple<Tensor &,Tensor &> eig_out(Tensor & res1, Tensor & res2, const Tensor & self, bool eigenvectors) const = 0;
  virtual std::tuple<Tensor &,Tensor &,Tensor &> svd_out(Tensor & res1, Tensor & res2, Tensor & res3, const Tensor & self, bool some, bool compute_uv) const = 0;
  virtual Tensor & _getri_out(Tensor & output, const Tensor & self) const = 0;
  virtual Tensor _getri(const Tensor & self) const = 0;
  virtual Tensor & potrf_out(Tensor & output, const Tensor & self, bool upper) const = 0;
  virtual Tensor & potrs_out(Tensor & result, const Tensor & self, const Tensor & input2, bool upper) const = 0;
  virtual Tensor & potri_out(Tensor & output, const Tensor & self, bool upper) const = 0;
  virtual std::tuple<Tensor &,Tensor &> pstrf_out(Tensor & res1, Tensor & res2, const Tensor & self, bool upper, Scalar tol) const = 0;
  virtual std::tuple<Tensor &,Tensor &> qr_out(Tensor & res1, Tensor & res2, const Tensor & self) const = 0;
  virtual std::tuple<Tensor &,Tensor &> geqrf_out(Tensor & res1, Tensor & res2, const Tensor & self) const = 0;
  virtual Tensor & orgqr_out(Tensor & result, const Tensor & self, const Tensor & input2) const = 0;
  virtual Tensor & ormqr_out(Tensor & result, const Tensor & self, const Tensor & input2, const Tensor & input3, bool left, bool transpose) const = 0;
  virtual std::tuple<Tensor &,Tensor &> btrifact_out(Tensor & result, Tensor & pivots, const Tensor & self, bool pivot) const = 0;
  virtual std::tuple<Tensor &,Tensor &,Tensor &> btrifact_with_info_out(Tensor & result, Tensor & pivots, Tensor & info, const Tensor & self, bool pivot) const = 0;
  virtual Tensor & btrisolve_out(Tensor & result, const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots) const = 0;
  virtual Tensor & multinomial_out(Tensor & result, const Tensor & self, int64_t num_samples, bool replacement, Generator * generator) const = 0;
  virtual Tensor & normal_out(Tensor & output, const Tensor & mean, double std, Generator * generator) const = 0;
  virtual Tensor normal(const Tensor & mean, double std, Generator * generator) const = 0;
  virtual Tensor & normal_out(Tensor & output, double mean, const Tensor & std, Generator * generator) const = 0;
  virtual Tensor normal(double mean, const Tensor & std, Generator * generator) const = 0;
  virtual Tensor & normal_out(Tensor & output, const Tensor & mean, const Tensor & std, Generator * generator) const = 0;
  virtual Tensor normal(const Tensor & mean, const Tensor & std, Generator * generator) const = 0;
  virtual Tensor & _dirichlet_grad_out(Tensor & output, const Tensor & x, const Tensor & alpha, const Tensor & total) const = 0;
  virtual Tensor _dirichlet_grad(const Tensor & x, const Tensor & alpha, const Tensor & total) const = 0;
  virtual Tensor th_tensor(IntList size) const = 0;
  virtual Tensor th_tensor() const = 0;
  virtual Tensor tensor(Storage storage, int64_t storageOffset, IntList size, IntList stride) const = 0;
  virtual Tensor tensor(IntList size, IntList stride) const = 0;
  virtual Tensor alias(const Tensor & self) const = 0;
  virtual Tensor & _copy_ignoring_overlaps_(Tensor & self, const Tensor & src) const = 0;
  virtual Tensor & _cat_out(Tensor & self, TensorList tensors, int64_t dim) const = 0;
  virtual Tensor _cat(TensorList tensors, int64_t dim) const = 0;
  virtual Tensor & binary_cross_entropy_out(Tensor & output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) const = 0;
  virtual Tensor binary_cross_entropy(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) const = 0;
  virtual Tensor & binary_cross_entropy_forward_out(Tensor & output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) const = 0;
  virtual Tensor binary_cross_entropy_forward(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) const = 0;
  virtual Tensor & binary_cross_entropy_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) const = 0;
  virtual Tensor binary_cross_entropy_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) const = 0;
  virtual Tensor & l1_loss_out(Tensor & output, const Tensor & self, const Tensor & target, int64_t reduction) const = 0;
  virtual Tensor l1_loss(const Tensor & self, const Tensor & target, int64_t reduction) const = 0;
  virtual Tensor & l1_loss_forward_out(Tensor & output, const Tensor & self, const Tensor & target, int64_t reduction) const = 0;
  virtual Tensor l1_loss_forward(const Tensor & self, const Tensor & target, int64_t reduction) const = 0;
  virtual Tensor & l1_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const = 0;
  virtual Tensor l1_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const = 0;
  virtual Tensor & mse_loss_out(Tensor & output, const Tensor & self, const Tensor & target, int64_t reduction) const = 0;
  virtual Tensor mse_loss(const Tensor & self, const Tensor & target, int64_t reduction) const = 0;
  virtual Tensor & mse_loss_forward_out(Tensor & output, const Tensor & self, const Tensor & target, int64_t reduction) const = 0;
  virtual Tensor mse_loss_forward(const Tensor & self, const Tensor & target, int64_t reduction) const = 0;
  virtual Tensor & mse_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const = 0;
  virtual Tensor mse_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const = 0;
  virtual Tensor & multi_margin_loss_out(Tensor & output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) const = 0;
  virtual Tensor multi_margin_loss(const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) const = 0;
  virtual Tensor & multi_margin_loss_forward_out(Tensor & output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) const = 0;
  virtual Tensor multi_margin_loss_forward(const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) const = 0;
  virtual Tensor & multi_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) const = 0;
  virtual Tensor multi_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) const = 0;
  virtual Tensor & multilabel_margin_loss_out(Tensor & output, const Tensor & self, const Tensor & target, int64_t reduction) const = 0;
  virtual Tensor multilabel_margin_loss(const Tensor & self, const Tensor & target, int64_t reduction) const = 0;
  virtual std::tuple<Tensor &,Tensor &> multilabel_margin_loss_forward_out(Tensor & output, Tensor & is_target, const Tensor & self, const Tensor & target, int64_t reduction) const = 0;
  virtual std::tuple<Tensor,Tensor> multilabel_margin_loss_forward(const Tensor & self, const Tensor & target, int64_t reduction) const = 0;
  virtual Tensor & multilabel_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, const Tensor & is_target) const = 0;
  virtual Tensor multilabel_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, const Tensor & is_target) const = 0;
  virtual Tensor & nll_loss_out(Tensor & output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) const = 0;
  virtual Tensor nll_loss(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) const = 0;
  virtual std::tuple<Tensor &,Tensor &> nll_loss_forward_out(Tensor & output, Tensor & total_weight, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) const = 0;
  virtual std::tuple<Tensor,Tensor> nll_loss_forward(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) const = 0;
  virtual Tensor & nll_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) const = 0;
  virtual Tensor nll_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) const = 0;
  virtual Tensor & nll_loss2d_out(Tensor & output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) const = 0;
  virtual Tensor nll_loss2d(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) const = 0;
  virtual std::tuple<Tensor &,Tensor &> nll_loss2d_forward_out(Tensor & output, Tensor & total_weight, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) const = 0;
  virtual std::tuple<Tensor,Tensor> nll_loss2d_forward(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) const = 0;
  virtual Tensor & nll_loss2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) const = 0;
  virtual Tensor nll_loss2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) const = 0;
  virtual Tensor & smooth_l1_loss_out(Tensor & output, const Tensor & self, const Tensor & target, int64_t reduction) const = 0;
  virtual Tensor smooth_l1_loss(const Tensor & self, const Tensor & target, int64_t reduction) const = 0;
  virtual Tensor & smooth_l1_loss_forward_out(Tensor & output, const Tensor & self, const Tensor & target, int64_t reduction) const = 0;
  virtual Tensor smooth_l1_loss_forward(const Tensor & self, const Tensor & target, int64_t reduction) const = 0;
  virtual Tensor & smooth_l1_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const = 0;
  virtual Tensor smooth_l1_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const = 0;
  virtual Tensor & soft_margin_loss_out(Tensor & output, const Tensor & self, const Tensor & target, int64_t reduction) const = 0;
  virtual Tensor soft_margin_loss(const Tensor & self, const Tensor & target, int64_t reduction) const = 0;
  virtual Tensor & soft_margin_loss_forward_out(Tensor & output, const Tensor & self, const Tensor & target, int64_t reduction) const = 0;
  virtual Tensor soft_margin_loss_forward(const Tensor & self, const Tensor & target, int64_t reduction) const = 0;
  virtual Tensor & soft_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const = 0;
  virtual Tensor soft_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const = 0;
  virtual Tensor & elu_out(Tensor & output, const Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) const = 0;
  virtual Tensor elu(const Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) const = 0;
  virtual Tensor & elu_forward_out(Tensor & output, const Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) const = 0;
  virtual Tensor elu_forward(const Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) const = 0;
  virtual Tensor & elu_backward_out(Tensor & grad_input, const Tensor & grad_output, Scalar alpha, Scalar scale, Scalar input_scale, const Tensor & output) const = 0;
  virtual Tensor elu_backward(const Tensor & grad_output, Scalar alpha, Scalar scale, Scalar input_scale, const Tensor & output) const = 0;
  virtual Tensor & elu_(Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) const = 0;
  virtual Tensor & elu_forward_(Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) const = 0;
  virtual Tensor & glu_out(Tensor & output, const Tensor & self, int64_t dim) const = 0;
  virtual Tensor glu(const Tensor & self, int64_t dim) const = 0;
  virtual Tensor & glu_forward_out(Tensor & output, const Tensor & self, int64_t dim) const = 0;
  virtual Tensor glu_forward(const Tensor & self, int64_t dim) const = 0;
  virtual Tensor & glu_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, int64_t dim) const = 0;
  virtual Tensor glu_backward(const Tensor & grad_output, const Tensor & self, int64_t dim) const = 0;
  virtual Tensor & hardtanh_out(Tensor & output, const Tensor & self, Scalar min_val, Scalar max_val) const = 0;
  virtual Tensor hardtanh(const Tensor & self, Scalar min_val, Scalar max_val) const = 0;
  virtual Tensor & hardtanh_forward_out(Tensor & output, const Tensor & self, Scalar min_val, Scalar max_val) const = 0;
  virtual Tensor hardtanh_forward(const Tensor & self, Scalar min_val, Scalar max_val) const = 0;
  virtual Tensor & hardtanh_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar min_val, Scalar max_val) const = 0;
  virtual Tensor hardtanh_backward(const Tensor & grad_output, const Tensor & self, Scalar min_val, Scalar max_val) const = 0;
  virtual Tensor & hardtanh_(Tensor & self, Scalar min_val, Scalar max_val) const = 0;
  virtual Tensor & hardtanh_forward_(Tensor & self, Scalar min_val, Scalar max_val) const = 0;
  virtual Tensor & leaky_relu_out(Tensor & output, const Tensor & self, Scalar negative_slope) const = 0;
  virtual Tensor leaky_relu(const Tensor & self, Scalar negative_slope) const = 0;
  virtual Tensor & leaky_relu_forward_out(Tensor & output, const Tensor & self, Scalar negative_slope) const = 0;
  virtual Tensor leaky_relu_forward(const Tensor & self, Scalar negative_slope) const = 0;
  virtual Tensor & leaky_relu_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar negative_slope) const = 0;
  virtual Tensor leaky_relu_backward(const Tensor & grad_output, const Tensor & self, Scalar negative_slope) const = 0;
  virtual Tensor & leaky_relu_(Tensor & self, Scalar negative_slope) const = 0;
  virtual Tensor & leaky_relu_forward_(Tensor & self, Scalar negative_slope) const = 0;
  virtual Tensor & log_sigmoid_out(Tensor & output, const Tensor & self) const = 0;
  virtual Tensor log_sigmoid(const Tensor & self) const = 0;
  virtual std::tuple<Tensor &,Tensor &> log_sigmoid_forward_out(Tensor & output, Tensor & buffer, const Tensor & self) const = 0;
  virtual std::tuple<Tensor,Tensor> log_sigmoid_forward(const Tensor & self) const = 0;
  virtual Tensor & log_sigmoid_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & buffer) const = 0;
  virtual Tensor log_sigmoid_backward(const Tensor & grad_output, const Tensor & self, const Tensor & buffer) const = 0;
  virtual Tensor & rrelu_with_noise_out(Tensor & output, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, Generator * generator) const = 0;
  virtual Tensor rrelu_with_noise(const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, Generator * generator) const = 0;
  virtual Tensor & rrelu_with_noise_forward_out(Tensor & output, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, Generator * generator) const = 0;
  virtual Tensor rrelu_with_noise_forward(const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, Generator * generator) const = 0;
  virtual Tensor & rrelu_with_noise_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training) const = 0;
  virtual Tensor rrelu_with_noise_backward(const Tensor & grad_output, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training) const = 0;
  virtual Tensor & rrelu_with_noise_(Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, Generator * generator) const = 0;
  virtual Tensor & rrelu_with_noise_forward_(Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, Generator * generator) const = 0;
  virtual Tensor & softplus_out(Tensor & output, const Tensor & self, Scalar beta, Scalar threshold) const = 0;
  virtual Tensor softplus(const Tensor & self, Scalar beta, Scalar threshold) const = 0;
  virtual Tensor & softplus_forward_out(Tensor & output, const Tensor & self, Scalar beta, Scalar threshold) const = 0;
  virtual Tensor softplus_forward(const Tensor & self, Scalar beta, Scalar threshold) const = 0;
  virtual Tensor & softplus_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar beta, Scalar threshold, const Tensor & output) const = 0;
  virtual Tensor softplus_backward(const Tensor & grad_output, const Tensor & self, Scalar beta, Scalar threshold, const Tensor & output) const = 0;
  virtual Tensor & softshrink_out(Tensor & output, const Tensor & self, Scalar lambd) const = 0;
  virtual Tensor softshrink(const Tensor & self, Scalar lambd) const = 0;
  virtual Tensor & softshrink_forward_out(Tensor & output, const Tensor & self, Scalar lambd) const = 0;
  virtual Tensor softshrink_forward(const Tensor & self, Scalar lambd) const = 0;
  virtual Tensor & softshrink_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar lambd) const = 0;
  virtual Tensor softshrink_backward(const Tensor & grad_output, const Tensor & self, Scalar lambd) const = 0;
  virtual Tensor & threshold_out(Tensor & output, const Tensor & self, Scalar threshold, Scalar value) const = 0;
  virtual Tensor threshold(const Tensor & self, Scalar threshold, Scalar value) const = 0;
  virtual Tensor & threshold_forward_out(Tensor & output, const Tensor & self, Scalar threshold, Scalar value) const = 0;
  virtual Tensor threshold_forward(const Tensor & self, Scalar threshold, Scalar value) const = 0;
  virtual Tensor & threshold_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar threshold, Scalar value) const = 0;
  virtual Tensor threshold_backward(const Tensor & grad_output, const Tensor & self, Scalar threshold, Scalar value) const = 0;
  virtual Tensor & threshold_(Tensor & self, Scalar threshold, Scalar value) const = 0;
  virtual Tensor & threshold_forward_(Tensor & self, Scalar threshold, Scalar value) const = 0;
  virtual Tensor & adaptive_avg_pool2d_out(Tensor & output, const Tensor & self, IntList output_size) const = 0;
  virtual Tensor adaptive_avg_pool2d(const Tensor & self, IntList output_size) const = 0;
  virtual Tensor & adaptive_avg_pool2d_forward_out(Tensor & output, const Tensor & self, IntList output_size) const = 0;
  virtual Tensor adaptive_avg_pool2d_forward(const Tensor & self, IntList output_size) const = 0;
  virtual Tensor & adaptive_avg_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self) const = 0;
  virtual Tensor adaptive_avg_pool2d_backward(const Tensor & grad_output, const Tensor & self) const = 0;
  virtual Tensor & adaptive_avg_pool3d_out(Tensor & output, const Tensor & self, IntList output_size) const = 0;
  virtual Tensor adaptive_avg_pool3d(const Tensor & self, IntList output_size) const = 0;
  virtual Tensor & adaptive_avg_pool3d_forward_out(Tensor & output, const Tensor & self, IntList output_size) const = 0;
  virtual Tensor adaptive_avg_pool3d_forward(const Tensor & self, IntList output_size) const = 0;
  virtual Tensor & adaptive_avg_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self) const = 0;
  virtual Tensor adaptive_avg_pool3d_backward(const Tensor & grad_output, const Tensor & self) const = 0;
  virtual std::tuple<Tensor &,Tensor &> adaptive_max_pool2d_out(Tensor & output, Tensor & indices, const Tensor & self, IntList output_size) const = 0;
  virtual std::tuple<Tensor,Tensor> adaptive_max_pool2d(const Tensor & self, IntList output_size) const = 0;
  virtual std::tuple<Tensor &,Tensor &> adaptive_max_pool2d_forward_out(Tensor & output, Tensor & indices, const Tensor & self, IntList output_size) const = 0;
  virtual std::tuple<Tensor,Tensor> adaptive_max_pool2d_forward(const Tensor & self, IntList output_size) const = 0;
  virtual Tensor & adaptive_max_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices) const = 0;
  virtual Tensor adaptive_max_pool2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices) const = 0;
  virtual std::tuple<Tensor &,Tensor &> adaptive_max_pool3d_out(Tensor & output, Tensor & indices, const Tensor & self, IntList output_size) const = 0;
  virtual std::tuple<Tensor,Tensor> adaptive_max_pool3d(const Tensor & self, IntList output_size) const = 0;
  virtual std::tuple<Tensor &,Tensor &> adaptive_max_pool3d_forward_out(Tensor & output, Tensor & indices, const Tensor & self, IntList output_size) const = 0;
  virtual std::tuple<Tensor,Tensor> adaptive_max_pool3d_forward(const Tensor & self, IntList output_size) const = 0;
  virtual Tensor & adaptive_max_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices) const = 0;
  virtual Tensor adaptive_max_pool3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices) const = 0;
  virtual Tensor & avg_pool2d_out(Tensor & output, const Tensor & self, IntList kernel_size, IntList stride, IntList padding, bool ceil_mode, bool count_include_pad) const = 0;
  virtual Tensor avg_pool2d(const Tensor & self, IntList kernel_size, IntList stride, IntList padding, bool ceil_mode, bool count_include_pad) const = 0;
  virtual Tensor & avg_pool2d_forward_out(Tensor & output, const Tensor & self, IntList kernel_size, IntList stride, IntList padding, bool ceil_mode, bool count_include_pad) const = 0;
  virtual Tensor avg_pool2d_forward(const Tensor & self, IntList kernel_size, IntList stride, IntList padding, bool ceil_mode, bool count_include_pad) const = 0;
  virtual Tensor & avg_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntList kernel_size, IntList stride, IntList padding, bool ceil_mode, bool count_include_pad) const = 0;
  virtual Tensor avg_pool2d_backward(const Tensor & grad_output, const Tensor & self, IntList kernel_size, IntList stride, IntList padding, bool ceil_mode, bool count_include_pad) const = 0;
  virtual Tensor & avg_pool3d_out(Tensor & output, const Tensor & self, IntList kernel_size, IntList stride, IntList padding, bool ceil_mode, bool count_include_pad) const = 0;
  virtual Tensor avg_pool3d(const Tensor & self, IntList kernel_size, IntList stride, IntList padding, bool ceil_mode, bool count_include_pad) const = 0;
  virtual Tensor & avg_pool3d_forward_out(Tensor & output, const Tensor & self, IntList kernel_size, IntList stride, IntList padding, bool ceil_mode, bool count_include_pad) const = 0;
  virtual Tensor avg_pool3d_forward(const Tensor & self, IntList kernel_size, IntList stride, IntList padding, bool ceil_mode, bool count_include_pad) const = 0;
  virtual Tensor & avg_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntList kernel_size, IntList stride, IntList padding, bool ceil_mode, bool count_include_pad) const = 0;
  virtual Tensor avg_pool3d_backward(const Tensor & grad_output, const Tensor & self, IntList kernel_size, IntList stride, IntList padding, bool ceil_mode, bool count_include_pad) const = 0;
  virtual std::tuple<Tensor &,Tensor &> fractional_max_pool2d_out(Tensor & output, Tensor & indices, const Tensor & self, IntList kernel_size, IntList output_size, const Tensor & random_samples) const = 0;
  virtual std::tuple<Tensor,Tensor> fractional_max_pool2d(const Tensor & self, IntList kernel_size, IntList output_size, const Tensor & random_samples) const = 0;
  virtual std::tuple<Tensor &,Tensor &> fractional_max_pool2d_forward_out(Tensor & output, Tensor & indices, const Tensor & self, IntList kernel_size, IntList output_size, const Tensor & random_samples) const = 0;
  virtual std::tuple<Tensor,Tensor> fractional_max_pool2d_forward(const Tensor & self, IntList kernel_size, IntList output_size, const Tensor & random_samples) const = 0;
  virtual Tensor & fractional_max_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntList kernel_size, IntList output_size, const Tensor & indices) const = 0;
  virtual Tensor fractional_max_pool2d_backward(const Tensor & grad_output, const Tensor & self, IntList kernel_size, IntList output_size, const Tensor & indices) const = 0;
  virtual std::tuple<Tensor &,Tensor &> max_pool2d_with_indices_out(Tensor & output, Tensor & indices, const Tensor & self, IntList kernel_size, IntList stride, IntList padding, IntList dilation, bool ceil_mode) const = 0;
  virtual std::tuple<Tensor,Tensor> max_pool2d_with_indices(const Tensor & self, IntList kernel_size, IntList stride, IntList padding, IntList dilation, bool ceil_mode) const = 0;
  virtual std::tuple<Tensor &,Tensor &> max_pool2d_with_indices_forward_out(Tensor & output, Tensor & indices, const Tensor & self, IntList kernel_size, IntList stride, IntList padding, IntList dilation, bool ceil_mode) const = 0;
  virtual std::tuple<Tensor,Tensor> max_pool2d_with_indices_forward(const Tensor & self, IntList kernel_size, IntList stride, IntList padding, IntList dilation, bool ceil_mode) const = 0;
  virtual Tensor & max_pool2d_with_indices_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntList kernel_size, IntList stride, IntList padding, IntList dilation, bool ceil_mode, const Tensor & indices) const = 0;
  virtual Tensor max_pool2d_with_indices_backward(const Tensor & grad_output, const Tensor & self, IntList kernel_size, IntList stride, IntList padding, IntList dilation, bool ceil_mode, const Tensor & indices) const = 0;
  virtual std::tuple<Tensor &,Tensor &> max_pool3d_with_indices_out(Tensor & output, Tensor & indices, const Tensor & self, IntList kernel_size, IntList stride, IntList padding, IntList dilation, bool ceil_mode) const = 0;
  virtual std::tuple<Tensor,Tensor> max_pool3d_with_indices(const Tensor & self, IntList kernel_size, IntList stride, IntList padding, IntList dilation, bool ceil_mode) const = 0;
  virtual std::tuple<Tensor &,Tensor &> max_pool3d_with_indices_forward_out(Tensor & output, Tensor & indices, const Tensor & self, IntList kernel_size, IntList stride, IntList padding, IntList dilation, bool ceil_mode) const = 0;
  virtual std::tuple<Tensor,Tensor> max_pool3d_with_indices_forward(const Tensor & self, IntList kernel_size, IntList stride, IntList padding, IntList dilation, bool ceil_mode) const = 0;
  virtual Tensor & max_pool3d_with_indices_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntList kernel_size, IntList stride, IntList padding, IntList dilation, bool ceil_mode, const Tensor & indices) const = 0;
  virtual Tensor max_pool3d_with_indices_backward(const Tensor & grad_output, const Tensor & self, IntList kernel_size, IntList stride, IntList padding, IntList dilation, bool ceil_mode, const Tensor & indices) const = 0;
  virtual Tensor & max_unpool2d_out(Tensor & output, const Tensor & self, const Tensor & indices, IntList output_size) const = 0;
  virtual Tensor max_unpool2d(const Tensor & self, const Tensor & indices, IntList output_size) const = 0;
  virtual Tensor & max_unpool2d_forward_out(Tensor & output, const Tensor & self, const Tensor & indices, IntList output_size) const = 0;
  virtual Tensor max_unpool2d_forward(const Tensor & self, const Tensor & indices, IntList output_size) const = 0;
  virtual Tensor & max_unpool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntList output_size) const = 0;
  virtual Tensor max_unpool2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntList output_size) const = 0;
  virtual Tensor & max_unpool3d_out(Tensor & output, const Tensor & self, const Tensor & indices, IntList output_size, IntList stride, IntList padding) const = 0;
  virtual Tensor max_unpool3d(const Tensor & self, const Tensor & indices, IntList output_size, IntList stride, IntList padding) const = 0;
  virtual Tensor & max_unpool3d_forward_out(Tensor & output, const Tensor & self, const Tensor & indices, IntList output_size, IntList stride, IntList padding) const = 0;
  virtual Tensor max_unpool3d_forward(const Tensor & self, const Tensor & indices, IntList output_size, IntList stride, IntList padding) const = 0;
  virtual Tensor & max_unpool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntList output_size, IntList stride, IntList padding) const = 0;
  virtual Tensor max_unpool3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntList output_size, IntList stride, IntList padding) const = 0;
  virtual Tensor & reflection_pad1d_out(Tensor & output, const Tensor & self, IntList padding) const = 0;
  virtual Tensor reflection_pad1d(const Tensor & self, IntList padding) const = 0;
  virtual Tensor & reflection_pad1d_forward_out(Tensor & output, const Tensor & self, IntList padding) const = 0;
  virtual Tensor reflection_pad1d_forward(const Tensor & self, IntList padding) const = 0;
  virtual Tensor & reflection_pad1d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntList padding) const = 0;
  virtual Tensor reflection_pad1d_backward(const Tensor & grad_output, const Tensor & self, IntList padding) const = 0;
  virtual Tensor & reflection_pad2d_out(Tensor & output, const Tensor & self, IntList padding) const = 0;
  virtual Tensor reflection_pad2d(const Tensor & self, IntList padding) const = 0;
  virtual Tensor & reflection_pad2d_forward_out(Tensor & output, const Tensor & self, IntList padding) const = 0;
  virtual Tensor reflection_pad2d_forward(const Tensor & self, IntList padding) const = 0;
  virtual Tensor & reflection_pad2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntList padding) const = 0;
  virtual Tensor reflection_pad2d_backward(const Tensor & grad_output, const Tensor & self, IntList padding) const = 0;
  virtual Tensor & replication_pad1d_out(Tensor & output, const Tensor & self, IntList padding) const = 0;
  virtual Tensor replication_pad1d(const Tensor & self, IntList padding) const = 0;
  virtual Tensor & replication_pad1d_forward_out(Tensor & output, const Tensor & self, IntList padding) const = 0;
  virtual Tensor replication_pad1d_forward(const Tensor & self, IntList padding) const = 0;
  virtual Tensor & replication_pad1d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntList padding) const = 0;
  virtual Tensor replication_pad1d_backward(const Tensor & grad_output, const Tensor & self, IntList padding) const = 0;
  virtual Tensor & replication_pad2d_out(Tensor & output, const Tensor & self, IntList padding) const = 0;
  virtual Tensor replication_pad2d(const Tensor & self, IntList padding) const = 0;
  virtual Tensor & replication_pad2d_forward_out(Tensor & output, const Tensor & self, IntList padding) const = 0;
  virtual Tensor replication_pad2d_forward(const Tensor & self, IntList padding) const = 0;
  virtual Tensor & replication_pad2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntList padding) const = 0;
  virtual Tensor replication_pad2d_backward(const Tensor & grad_output, const Tensor & self, IntList padding) const = 0;
  virtual Tensor & replication_pad3d_out(Tensor & output, const Tensor & self, IntList padding) const = 0;
  virtual Tensor replication_pad3d(const Tensor & self, IntList padding) const = 0;
  virtual Tensor & replication_pad3d_forward_out(Tensor & output, const Tensor & self, IntList padding) const = 0;
  virtual Tensor replication_pad3d_forward(const Tensor & self, IntList padding) const = 0;
  virtual Tensor & replication_pad3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntList padding) const = 0;
  virtual Tensor replication_pad3d_backward(const Tensor & grad_output, const Tensor & self, IntList padding) const = 0;
  virtual Tensor & upsample_linear1d_out(Tensor & output, const Tensor & self, IntList output_size, bool align_corners) const = 0;
  virtual Tensor upsample_linear1d(const Tensor & self, IntList output_size, bool align_corners) const = 0;
  virtual Tensor & upsample_linear1d_forward_out(Tensor & output, const Tensor & self, IntList output_size, bool align_corners) const = 0;
  virtual Tensor upsample_linear1d_forward(const Tensor & self, IntList output_size, bool align_corners) const = 0;
  virtual Tensor & upsample_linear1d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntList output_size, IntList input_size, bool align_corners) const = 0;
  virtual Tensor upsample_linear1d_backward(const Tensor & grad_output, IntList output_size, IntList input_size, bool align_corners) const = 0;
  virtual Tensor & upsample_bilinear2d_out(Tensor & output, const Tensor & self, IntList output_size, bool align_corners) const = 0;
  virtual Tensor upsample_bilinear2d(const Tensor & self, IntList output_size, bool align_corners) const = 0;
  virtual Tensor & upsample_bilinear2d_forward_out(Tensor & output, const Tensor & self, IntList output_size, bool align_corners) const = 0;
  virtual Tensor upsample_bilinear2d_forward(const Tensor & self, IntList output_size, bool align_corners) const = 0;
  virtual Tensor & upsample_bilinear2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntList output_size, IntList input_size, bool align_corners) const = 0;
  virtual Tensor upsample_bilinear2d_backward(const Tensor & grad_output, IntList output_size, IntList input_size, bool align_corners) const = 0;
  virtual Tensor & upsample_trilinear3d_out(Tensor & output, const Tensor & self, IntList output_size, bool align_corners) const = 0;
  virtual Tensor upsample_trilinear3d(const Tensor & self, IntList output_size, bool align_corners) const = 0;
  virtual Tensor & upsample_trilinear3d_forward_out(Tensor & output, const Tensor & self, IntList output_size, bool align_corners) const = 0;
  virtual Tensor upsample_trilinear3d_forward(const Tensor & self, IntList output_size, bool align_corners) const = 0;
  virtual Tensor & upsample_trilinear3d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntList output_size, IntList input_size, bool align_corners) const = 0;
  virtual Tensor upsample_trilinear3d_backward(const Tensor & grad_output, IntList output_size, IntList input_size, bool align_corners) const = 0;
  virtual Tensor & upsample_nearest1d_out(Tensor & output, const Tensor & self, IntList output_size) const = 0;
  virtual Tensor upsample_nearest1d(const Tensor & self, IntList output_size) const = 0;
  virtual Tensor & upsample_nearest1d_forward_out(Tensor & output, const Tensor & self, IntList output_size) const = 0;
  virtual Tensor upsample_nearest1d_forward(const Tensor & self, IntList output_size) const = 0;
  virtual Tensor & upsample_nearest1d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntList output_size, IntList input_size) const = 0;
  virtual Tensor upsample_nearest1d_backward(const Tensor & grad_output, IntList output_size, IntList input_size) const = 0;
  virtual Tensor & upsample_nearest2d_out(Tensor & output, const Tensor & self, IntList output_size) const = 0;
  virtual Tensor upsample_nearest2d(const Tensor & self, IntList output_size) const = 0;
  virtual Tensor & upsample_nearest2d_forward_out(Tensor & output, const Tensor & self, IntList output_size) const = 0;
  virtual Tensor upsample_nearest2d_forward(const Tensor & self, IntList output_size) const = 0;
  virtual Tensor & upsample_nearest2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntList output_size, IntList input_size) const = 0;
  virtual Tensor upsample_nearest2d_backward(const Tensor & grad_output, IntList output_size, IntList input_size) const = 0;
  virtual Tensor & upsample_nearest3d_out(Tensor & output, const Tensor & self, IntList output_size) const = 0;
  virtual Tensor upsample_nearest3d(const Tensor & self, IntList output_size) const = 0;
  virtual Tensor & upsample_nearest3d_forward_out(Tensor & output, const Tensor & self, IntList output_size) const = 0;
  virtual Tensor upsample_nearest3d_forward(const Tensor & self, IntList output_size) const = 0;
  virtual Tensor & upsample_nearest3d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntList output_size, IntList input_size) const = 0;
  virtual Tensor upsample_nearest3d_backward(const Tensor & grad_output, IntList output_size, IntList input_size) const = 0;
  virtual Tensor & _sigmoid_out(Tensor & output, const Tensor & self) const = 0;
  virtual Tensor _sigmoid(const Tensor & self) const = 0;
  virtual Tensor & _sigmoid_forward_out(Tensor & output, const Tensor & self) const = 0;
  virtual Tensor _sigmoid_forward(const Tensor & self) const = 0;
  virtual Tensor & _sigmoid_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & output) const = 0;
  virtual Tensor _sigmoid_backward(const Tensor & grad_output, const Tensor & output) const = 0;
  virtual Tensor & _tanh_out(Tensor & output, const Tensor & self) const = 0;
  virtual Tensor _tanh(const Tensor & self) const = 0;
  virtual Tensor & _tanh_forward_out(Tensor & output, const Tensor & self) const = 0;
  virtual Tensor _tanh_forward(const Tensor & self) const = 0;
  virtual Tensor & _tanh_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & output) const = 0;
  virtual Tensor _tanh_backward(const Tensor & grad_output, const Tensor & output) const = 0;
  virtual Tensor & thnn_batch_norm_out(Tensor & output, const Tensor & self, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps) const = 0;
  virtual Tensor thnn_batch_norm(const Tensor & self, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps) const = 0;
  virtual std::tuple<Tensor &,Tensor &,Tensor &> thnn_batch_norm_forward_out(Tensor & output, Tensor & save_mean, Tensor & save_std, const Tensor & self, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps) const = 0;
  virtual std::tuple<Tensor,Tensor,Tensor> thnn_batch_norm_forward(const Tensor & self, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps) const = 0;
  virtual std::tuple<Tensor &,Tensor &,Tensor &> thnn_batch_norm_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, bool training, double eps, const Tensor & save_mean, const Tensor & save_std) const = 0;
  virtual std::tuple<Tensor,Tensor,Tensor> thnn_batch_norm_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, bool training, double eps, const Tensor & save_mean, const Tensor & save_std, std::array<bool,3> output_mask) const = 0;
  virtual Tensor & thnn_conv_transpose2d_out(Tensor & output, const Tensor & self, const Tensor & weight, IntList kernel_size, const Tensor & bias, IntList stride, IntList padding, IntList output_padding, IntList dilation) const = 0;
  virtual Tensor thnn_conv_transpose2d(const Tensor & self, const Tensor & weight, IntList kernel_size, const Tensor & bias, IntList stride, IntList padding, IntList output_padding, IntList dilation) const = 0;
  virtual std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv_transpose2d_forward_out(Tensor & output, Tensor & columns, Tensor & ones, const Tensor & self, const Tensor & weight, IntList kernel_size, const Tensor & bias, IntList stride, IntList padding, IntList output_padding, IntList dilation) const = 0;
  virtual std::tuple<Tensor,Tensor,Tensor> thnn_conv_transpose2d_forward(const Tensor & self, const Tensor & weight, IntList kernel_size, const Tensor & bias, IntList stride, IntList padding, IntList output_padding, IntList dilation) const = 0;
  virtual std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv_transpose2d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntList kernel_size, IntList stride, IntList padding, IntList output_padding, IntList dilation, const Tensor & columns, const Tensor & ones) const = 0;
  virtual std::tuple<Tensor,Tensor,Tensor> thnn_conv_transpose2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntList kernel_size, IntList stride, IntList padding, IntList output_padding, IntList dilation, const Tensor & columns, const Tensor & ones, std::array<bool,3> output_mask) const = 0;
  virtual Tensor & thnn_conv_transpose3d_out(Tensor & output, const Tensor & self, const Tensor & weight, IntList kernel_size, const Tensor & bias, IntList stride, IntList padding, IntList output_padding, IntList dilation) const = 0;
  virtual Tensor thnn_conv_transpose3d(const Tensor & self, const Tensor & weight, IntList kernel_size, const Tensor & bias, IntList stride, IntList padding, IntList output_padding, IntList dilation) const = 0;
  virtual std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv_transpose3d_forward_out(Tensor & output, Tensor & finput, Tensor & fgrad_input, const Tensor & self, const Tensor & weight, IntList kernel_size, const Tensor & bias, IntList stride, IntList padding, IntList output_padding, IntList dilation) const = 0;
  virtual std::tuple<Tensor,Tensor,Tensor> thnn_conv_transpose3d_forward(const Tensor & self, const Tensor & weight, IntList kernel_size, const Tensor & bias, IntList stride, IntList padding, IntList output_padding, IntList dilation) const = 0;
  virtual std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv_transpose3d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntList kernel_size, IntList stride, IntList padding, IntList output_padding, IntList dilation, const Tensor & finput, const Tensor & fgrad_input) const = 0;
  virtual std::tuple<Tensor,Tensor,Tensor> thnn_conv_transpose3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntList kernel_size, IntList stride, IntList padding, IntList output_padding, IntList dilation, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask) const = 0;
  virtual Tensor & thnn_conv2d_out(Tensor & output, const Tensor & self, const Tensor & weight, IntList kernel_size, const Tensor & bias, IntList stride, IntList padding) const = 0;
  virtual Tensor thnn_conv2d(const Tensor & self, const Tensor & weight, IntList kernel_size, const Tensor & bias, IntList stride, IntList padding) const = 0;
  virtual std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv2d_forward_out(Tensor & output, Tensor & finput, Tensor & fgrad_input, const Tensor & self, const Tensor & weight, IntList kernel_size, const Tensor & bias, IntList stride, IntList padding) const = 0;
  virtual std::tuple<Tensor,Tensor,Tensor> thnn_conv2d_forward(const Tensor & self, const Tensor & weight, IntList kernel_size, const Tensor & bias, IntList stride, IntList padding) const = 0;
  virtual std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv2d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntList kernel_size, IntList stride, IntList padding, const Tensor & finput, const Tensor & fgrad_input) const = 0;
  virtual std::tuple<Tensor,Tensor,Tensor> thnn_conv2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntList kernel_size, IntList stride, IntList padding, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask) const = 0;
  virtual Tensor & thnn_conv_depthwise2d_out(Tensor & output, const Tensor & self, const Tensor & weight, IntList kernel_size, const Tensor & bias, IntList stride, IntList padding, IntList dilation) const = 0;
  virtual Tensor thnn_conv_depthwise2d(const Tensor & self, const Tensor & weight, IntList kernel_size, const Tensor & bias, IntList stride, IntList padding, IntList dilation) const = 0;
  virtual Tensor & thnn_conv_depthwise2d_forward_out(Tensor & output, const Tensor & self, const Tensor & weight, IntList kernel_size, const Tensor & bias, IntList stride, IntList padding, IntList dilation) const = 0;
  virtual Tensor thnn_conv_depthwise2d_forward(const Tensor & self, const Tensor & weight, IntList kernel_size, const Tensor & bias, IntList stride, IntList padding, IntList dilation) const = 0;
  virtual std::tuple<Tensor &,Tensor &> thnn_conv_depthwise2d_backward_out(Tensor & grad_input, Tensor & grad_weight, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntList kernel_size, IntList stride, IntList padding, IntList dilation) const = 0;
  virtual std::tuple<Tensor,Tensor> thnn_conv_depthwise2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntList kernel_size, IntList stride, IntList padding, IntList dilation, std::array<bool,2> output_mask) const = 0;
  virtual Tensor & thnn_conv3d_out(Tensor & output, const Tensor & self, const Tensor & weight, IntList kernel_size, const Tensor & bias, IntList stride, IntList padding) const = 0;
  virtual Tensor thnn_conv3d(const Tensor & self, const Tensor & weight, IntList kernel_size, const Tensor & bias, IntList stride, IntList padding) const = 0;
  virtual std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv3d_forward_out(Tensor & output, Tensor & finput, Tensor & fgrad_input, const Tensor & self, const Tensor & weight, IntList kernel_size, const Tensor & bias, IntList stride, IntList padding) const = 0;
  virtual std::tuple<Tensor,Tensor,Tensor> thnn_conv3d_forward(const Tensor & self, const Tensor & weight, IntList kernel_size, const Tensor & bias, IntList stride, IntList padding) const = 0;
  virtual std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv3d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntList kernel_size, IntList stride, IntList padding, const Tensor & finput, const Tensor & fgrad_input) const = 0;
  virtual std::tuple<Tensor,Tensor,Tensor> thnn_conv3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntList kernel_size, IntList stride, IntList padding, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask) const = 0;
  virtual Tensor & thnn_conv_dilated2d_out(Tensor & output, const Tensor & self, const Tensor & weight, IntList kernel_size, const Tensor & bias, IntList stride, IntList padding, IntList dilation) const = 0;
  virtual Tensor thnn_conv_dilated2d(const Tensor & self, const Tensor & weight, IntList kernel_size, const Tensor & bias, IntList stride, IntList padding, IntList dilation) const = 0;
  virtual std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv_dilated2d_forward_out(Tensor & output, Tensor & columns, Tensor & ones, const Tensor & self, const Tensor & weight, IntList kernel_size, const Tensor & bias, IntList stride, IntList padding, IntList dilation) const = 0;
  virtual std::tuple<Tensor,Tensor,Tensor> thnn_conv_dilated2d_forward(const Tensor & self, const Tensor & weight, IntList kernel_size, const Tensor & bias, IntList stride, IntList padding, IntList dilation) const = 0;
  virtual std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv_dilated2d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntList kernel_size, IntList stride, IntList padding, IntList dilation, const Tensor & columns, const Tensor & ones) const = 0;
  virtual std::tuple<Tensor,Tensor,Tensor> thnn_conv_dilated2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntList kernel_size, IntList stride, IntList padding, IntList dilation, const Tensor & columns, const Tensor & ones, std::array<bool,3> output_mask) const = 0;
  virtual Tensor & thnn_conv_dilated3d_out(Tensor & output, const Tensor & self, const Tensor & weight, IntList kernel_size, const Tensor & bias, IntList stride, IntList padding, IntList dilation) const = 0;
  virtual Tensor thnn_conv_dilated3d(const Tensor & self, const Tensor & weight, IntList kernel_size, const Tensor & bias, IntList stride, IntList padding, IntList dilation) const = 0;
  virtual std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv_dilated3d_forward_out(Tensor & output, Tensor & columns, Tensor & ones, const Tensor & self, const Tensor & weight, IntList kernel_size, const Tensor & bias, IntList stride, IntList padding, IntList dilation) const = 0;
  virtual std::tuple<Tensor,Tensor,Tensor> thnn_conv_dilated3d_forward(const Tensor & self, const Tensor & weight, IntList kernel_size, const Tensor & bias, IntList stride, IntList padding, IntList dilation) const = 0;
  virtual std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv_dilated3d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntList kernel_size, IntList stride, IntList padding, IntList dilation, const Tensor & columns, const Tensor & ones) const = 0;
  virtual std::tuple<Tensor,Tensor,Tensor> thnn_conv_dilated3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntList kernel_size, IntList stride, IntList padding, IntList dilation, const Tensor & columns, const Tensor & ones, std::array<bool,3> output_mask) const = 0;
  virtual Tensor _cast_Byte(const Tensor & self, bool non_blocking) const = 0;
  virtual Tensor _cast_Char(const Tensor & self, bool non_blocking) const = 0;
  virtual Tensor _cast_Double(const Tensor & self, bool non_blocking) const = 0;
  virtual Tensor _cast_Float(const Tensor & self, bool non_blocking) const = 0;
  virtual Tensor _cast_Int(const Tensor & self, bool non_blocking) const = 0;
  virtual Tensor _cast_Long(const Tensor & self, bool non_blocking) const = 0;
  virtual Tensor _cast_Short(const Tensor & self, bool non_blocking) const = 0;
  virtual Tensor _cast_Half(const Tensor & self, bool non_blocking) const = 0;
  virtual std::tuple<Tensor,Tensor> _cudnn_ctc_loss(const Tensor & log_probs, const Tensor & targets, IntList input_lengths, IntList target_lengths, int64_t blank, bool deterministic) const = 0;
  virtual Tensor _cudnn_rnn_flatten_weight(TensorList weight_arr, int64_t weight_stride0, int64_t input_size, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, bool bidirectional) const = 0;
  virtual std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _cudnn_rnn(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const Tensor & cx, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntList batch_sizes, const Tensor & dropout_state) const = 0;
  virtual std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>> _cudnn_rnn_backward(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const Tensor & cx, const Tensor & output, const Tensor & grad_output, const Tensor & grad_hy, const Tensor & grad_cy, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntList batch_sizes, const Tensor & dropout_state, const Tensor & reserve, std::array<bool,4> output_mask) const = 0;
  virtual Tensor _cudnn_init_dropout_state(double dropout, bool train, int64_t dropout_seed, const TensorOptions & options) const = 0;
  virtual std::tuple<Tensor,Tensor> _fused_dropout(const Tensor & self, double p, Generator * generator) const = 0;
  virtual Tensor _masked_scale(const Tensor & self, const Tensor & mask, double scale) const = 0;
  virtual Tensor _reshape_from_tensor(const Tensor & self, const Tensor & shape) const = 0;
  virtual Tensor _shape_as_tensor(const Tensor & self) const = 0;
  virtual Tensor dropout(const Tensor & input, double p, bool train) const = 0;
  virtual Tensor & dropout_(Tensor & self, double p, bool train) const = 0;
  virtual Tensor feature_dropout(const Tensor & input, double p, bool train) const = 0;
  virtual Tensor & feature_dropout_(Tensor & self, double p, bool train) const = 0;
  virtual Tensor alpha_dropout(const Tensor & input, double p, bool train) const = 0;
  virtual Tensor & alpha_dropout_(Tensor & self, double p, bool train) const = 0;
  virtual Tensor feature_alpha_dropout(const Tensor & input, double p, bool train) const = 0;
  virtual Tensor & feature_alpha_dropout_(Tensor & self, double p, bool train) const = 0;
  virtual Tensor & abs_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor & acos_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor avg_pool1d(const Tensor & self, IntList kernel_size, IntList stride, IntList padding, bool ceil_mode, bool count_include_pad) const = 0;
  virtual Tensor adaptive_avg_pool1d(const Tensor & self, IntList output_size) const = 0;
  virtual std::tuple<Tensor,Tensor> adaptive_max_pool1d(const Tensor & self, IntList output_size) const = 0;
  virtual Tensor & add_out(Tensor & result, const Tensor & self, const Tensor & other, Scalar alpha) const = 0;
  virtual Tensor & addmv_out(Tensor & result, const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor & addr_out(Tensor & result, const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor & all_out(Tensor & result, const Tensor & self, int64_t dim, bool keepdim) const = 0;
  virtual Tensor & any_out(Tensor & result, const Tensor & self, int64_t dim, bool keepdim) const = 0;
  virtual Tensor & arange_out(Tensor & result, Scalar start, Scalar end) const = 0;
  virtual Tensor & arange_out(Tensor & result, Scalar start, Scalar end, Scalar step) const = 0;
  virtual Tensor & arange_out(Tensor & result, Scalar end) const = 0;
  virtual Tensor _dim_arange(const Tensor & like, int64_t dim) const = 0;
  virtual Tensor _argmax(const Tensor & self, int64_t dim, bool keepdim) const = 0;
  virtual Tensor _argmin(const Tensor & self, int64_t dim, bool keepdim) const = 0;
  virtual Tensor & asin_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor & atan_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor & _baddbmm_mkl_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor & baddbmm_out(Tensor & result, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps, bool cudnn_enabled) const = 0;
  virtual Tensor & bernoulli_out(Tensor & result, const Tensor & self, Generator * generator) const = 0;
  virtual Tensor bilinear(const Tensor & input1, const Tensor & input2, const Tensor & weight, const Tensor & bias) const = 0;
  virtual Tensor binary_cross_entropy_with_logits(const Tensor & self, const Tensor & target, const Tensor & weight, const Tensor & pos_weight, int64_t reduction) const = 0;
  virtual Tensor binary_cross_entropy_with_logits_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, const Tensor & pos_weight, int64_t reduction) const = 0;
  virtual Tensor & bmm_out(Tensor & result, const Tensor & self, const Tensor & mat2) const = 0;
  virtual std::vector<Tensor> broadcast_tensors(TensorList tensors) const = 0;
  virtual Tensor cat(TensorList tensors, int64_t dim) const = 0;
  virtual Tensor & cat_out(Tensor & result, TensorList tensors, int64_t dim) const = 0;
  virtual Tensor & ceil_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor chain_matmul(TensorList matrices) const = 0;
  virtual Tensor & clamp_out(Tensor & result, const Tensor & self, Scalar min, Scalar max) const = 0;
  virtual Tensor & clamp_max_out(Tensor & result, const Tensor & self, Scalar max) const = 0;
  virtual Tensor & clamp_min_out(Tensor & result, const Tensor & self, Scalar min) const = 0;
  virtual bool cudnn_is_acceptable(const Tensor & self) const = 0;
  virtual Tensor convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntList stride, IntList padding, IntList dilation, bool transposed, IntList output_padding, int64_t groups) const = 0;
  virtual Tensor _convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntList stride, IntList padding, IntList dilation, bool transposed, IntList output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled) const = 0;
  virtual Tensor _convolution_nogroup(const Tensor & input, const Tensor & weight, const Tensor & bias, IntList stride, IntList padding, IntList dilation, bool transposed, IntList output_padding) const = 0;
  virtual std::tuple<Tensor,Tensor,Tensor> _convolution_double_backward(const Tensor & ggI, const Tensor & ggW, const Tensor & ggb, const Tensor & gO, const Tensor & weight, const Tensor & self, IntList stride, IntList padding, IntList dilation, bool transposed, IntList output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled, std::array<bool,3> output_mask) const = 0;
  virtual Tensor conv1d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntList stride, IntList padding, IntList dilation, int64_t groups) const = 0;
  virtual Tensor conv2d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntList stride, IntList padding, IntList dilation, int64_t groups) const = 0;
  virtual Tensor conv3d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntList stride, IntList padding, IntList dilation, int64_t groups) const = 0;
  virtual Tensor conv_tbc(const Tensor & self, const Tensor & weight, const Tensor & bias, int64_t pad) const = 0;
  virtual std::tuple<Tensor,Tensor,Tensor> conv_tbc_backward(const Tensor & self, const Tensor & input, const Tensor & weight, const Tensor & bias, int64_t pad) const = 0;
  virtual Tensor conv_transpose1d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntList stride, IntList padding, IntList output_padding, int64_t groups, IntList dilation) const = 0;
  virtual Tensor conv_transpose2d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntList stride, IntList padding, IntList output_padding, int64_t groups, IntList dilation) const = 0;
  virtual Tensor conv_transpose3d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntList stride, IntList padding, IntList output_padding, int64_t groups, IntList dilation) const = 0;
  virtual Tensor & cos_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor & cosh_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor cosine_embedding_loss(const Tensor & input1, const Tensor & input2, const Tensor & target, double margin, int64_t reduction) const = 0;
  virtual Tensor cudnn_affine_grid_generator(const Tensor & theta, int64_t N, int64_t C, int64_t H, int64_t W) const = 0;
  virtual Tensor cudnn_affine_grid_generator_backward(const Tensor & grad, int64_t N, int64_t C, int64_t H, int64_t W) const = 0;
  virtual std::tuple<Tensor,Tensor,Tensor> cudnn_batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double exponential_average_factor, double epsilon) const = 0;
  virtual std::tuple<Tensor,Tensor,Tensor> cudnn_batch_norm_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_var, double epsilon) const = 0;
  virtual Tensor cudnn_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntList padding, IntList stride, IntList dilation, int64_t groups, bool benchmark, bool deterministic) const = 0;
  virtual Tensor cudnn_convolution_backward_input(IntList self_size, const Tensor & grad_output, const Tensor & weight, IntList padding, IntList stride, IntList dilation, int64_t groups, bool benchmark, bool deterministic) const = 0;
  virtual std::tuple<Tensor,Tensor,Tensor> cudnn_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntList padding, IntList stride, IntList dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) const = 0;
  virtual Tensor cudnn_convolution_backward_bias(const Tensor & grad_output) const = 0;
  virtual Tensor cudnn_convolution_backward_weight(IntList weight_size, const Tensor & grad_output, const Tensor & self, IntList padding, IntList stride, IntList dilation, int64_t groups, bool benchmark, bool deterministic) const = 0;
  virtual Tensor cudnn_convolution_transpose(const Tensor & self, const Tensor & weight, const Tensor & bias, IntList padding, IntList output_padding, IntList stride, IntList dilation, int64_t groups, bool benchmark, bool deterministic) const = 0;
  virtual std::tuple<Tensor,Tensor,Tensor> cudnn_convolution_transpose_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntList padding, IntList output_padding, IntList stride, IntList dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) const = 0;
  virtual Tensor cudnn_convolution_transpose_backward_bias(const Tensor & grad_output) const = 0;
  virtual Tensor cudnn_convolution_transpose_backward_input(const Tensor & grad_output, const Tensor & weight, IntList padding, IntList stride, IntList dilation, int64_t groups, bool benchmark, bool deterministic) const = 0;
  virtual Tensor cudnn_convolution_transpose_backward_weight(IntList weight_size, const Tensor & grad_output, const Tensor & self, IntList padding, IntList stride, IntList dilation, int64_t groups, bool benchmark, bool deterministic) const = 0;
  virtual Tensor cudnn_grid_sampler(const Tensor & self, const Tensor & grid) const = 0;
  virtual std::tuple<Tensor,Tensor> cudnn_grid_sampler_backward(const Tensor & self, const Tensor & grid, const Tensor & grad_output) const = 0;
  virtual Tensor & cumsum_out(Tensor & result, const Tensor & self, int64_t dim, ScalarType dtype) const = 0;
  virtual Tensor & cumsum_out(Tensor & result, const Tensor & self, int64_t dim) const = 0;
  virtual Tensor & cumprod_out(Tensor & result, const Tensor & self, int64_t dim, ScalarType dtype) const = 0;
  virtual Tensor & cumprod_out(Tensor & result, const Tensor & self, int64_t dim) const = 0;
  virtual Tensor ctc_loss(const Tensor & log_probs, const Tensor & targets, IntList input_lengths, IntList target_lengths, int64_t blank, int64_t reduction) const = 0;
  virtual Tensor ctc_loss(const Tensor & log_probs, const Tensor & targets, const Tensor & input_lengths, const Tensor & target_lengths, int64_t blank, int64_t reduction) const = 0;
  virtual std::tuple<Tensor,Tensor> _ctc_loss(const Tensor & log_probs, const Tensor & targets, IntList input_lengths, IntList target_lengths, int64_t blank) const = 0;
  virtual Tensor _ctc_loss_backward(const Tensor & grad, const Tensor & log_probs, const Tensor & targets, IntList input_lengths, IntList target_lengths, const Tensor & neg_log_likelihood, const Tensor & log_alpha, int64_t blank) const = 0;
  virtual Tensor & div_out(Tensor & result, const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & dot_out(Tensor & result, const Tensor & self, const Tensor & tensor) const = 0;
  virtual Tensor einsum(std::string equation, TensorList tensors) const = 0;
  virtual Tensor embedding(const Tensor & weight, const Tensor & indices, int64_t padding_idx, bool scale_grad_by_freq, bool sparse) const = 0;
  virtual Tensor embedding_backward(const Tensor & grad, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq, bool sparse) const = 0;
  virtual Tensor embedding_dense_backward(const Tensor & grad, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq) const = 0;
  virtual Tensor & embedding_renorm_(Tensor & self, const Tensor & indices, double max_norm, double norm_type) const = 0;
  virtual Tensor embedding_sparse_backward(const Tensor & grad, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq) const = 0;
  virtual std::tuple<Tensor,Tensor,Tensor,Tensor> embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse) const = 0;
  virtual std::tuple<Tensor,Tensor,Tensor,Tensor> _embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse) const = 0;
  virtual Tensor _embedding_bag_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, bool sparse) const = 0;
  virtual Tensor _embedding_bag_sparse_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, int64_t num_weights, bool scale_grad_by_freq, int64_t mode) const = 0;
  virtual Tensor _embedding_bag_dense_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode) const = 0;
  virtual Tensor empty(IntList size, const TensorOptions & options) const = 0;
  virtual Tensor & empty_out(Tensor & result, IntList size) const = 0;
  virtual Tensor empty_like(const Tensor & self) const = 0;
  virtual Tensor & erf_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor & erfc_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor & exp_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor & expm1_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor & eye_out(Tensor & result, int64_t n) const = 0;
  virtual Tensor & eye_out(Tensor & result, int64_t n, int64_t m) const = 0;
  virtual Tensor & floor_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor & full_out(Tensor & result, IntList size, Scalar fill_value) const = 0;
  virtual Tensor full_like(const Tensor & self, Scalar fill_value) const = 0;
  virtual Tensor grid_sampler(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode) const = 0;
  virtual Tensor grid_sampler_2d(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode) const = 0;
  virtual std::tuple<Tensor,Tensor> grid_sampler_2d_backward(const Tensor & grad_output, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode) const = 0;
  virtual Tensor grid_sampler_3d(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode) const = 0;
  virtual std::tuple<Tensor,Tensor> grid_sampler_3d_backward(const Tensor & grad_output, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode) const = 0;
  virtual Tensor hinge_embedding_loss(const Tensor & self, const Tensor & target, double margin, int64_t reduction) const = 0;
  virtual Tensor & ger_out(Tensor & result, const Tensor & self, const Tensor & vec2) const = 0;
  virtual std::tuple<Tensor &,Tensor &> gesv_out(Tensor & solution, Tensor & lu, const Tensor & self, const Tensor & A) const = 0;
  virtual std::tuple<Tensor,Tensor> _gesv_helper(const Tensor & self, const Tensor & A) const = 0;
  virtual Tensor group_norm(const Tensor & input, int64_t num_groups, const Tensor & weight, const Tensor & bias, double eps, bool cudnn_enabled) const = 0;
  virtual Tensor _fft_with_size(const Tensor & self, int64_t signal_ndim, bool complex_input, bool complex_output, bool inverse, IntList checked_signal_sizes, bool normalized, bool onesided, IntList output_sizes) const = 0;
  virtual int64_t _cufft_get_plan_cache_size() const = 0;
  virtual int64_t _cufft_get_plan_cache_max_size() const = 0;
  virtual void _cufft_set_plan_cache_max_size(int64_t max_size) const = 0;
  virtual void _cufft_clear_plan_cache() const = 0;
  virtual Tensor instance_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool use_input_stats, double momentum, double eps, bool cudnn_enabled) const = 0;
  virtual Tensor & inverse_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor kl_div(const Tensor & self, const Tensor & target, int64_t reduction) const = 0;
  virtual Tensor kl_div_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const = 0;
  virtual std::tuple<Tensor &,Tensor &> kthvalue_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, int64_t dim, bool keepdim) const = 0;
  virtual Tensor layer_norm(const Tensor & input, IntList normalized_shape, const Tensor & weight, const Tensor & bias, double eps, bool cudnn_enable) const = 0;
  virtual Tensor linear(const Tensor & input, const Tensor & weight, const Tensor & bias) const = 0;
  virtual Tensor & linspace_out(Tensor & result, Scalar start, Scalar end) const = 0;
  virtual Tensor & linspace_out(Tensor & result, Scalar start, Scalar end, int64_t steps) const = 0;
  virtual Tensor & log_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor & log10_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor & log1p_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor & log2_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor & logspace_out(Tensor & result, Scalar start, Scalar end) const = 0;
  virtual Tensor & logspace_out(Tensor & result, Scalar start, Scalar end, int64_t steps) const = 0;
  virtual Tensor _log_softmax(const Tensor & self, int64_t dim, bool half_to_float) const = 0;
  virtual Tensor _log_softmax_backward_data(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self) const = 0;
  virtual Tensor & logsumexp_out(Tensor & result, const Tensor & self, int64_t dim, bool keepdim) const = 0;
  virtual Tensor margin_ranking_loss(const Tensor & input1, const Tensor & input2, const Tensor & target, double margin, int64_t reduction) const = 0;
  virtual Tensor & matmul_out(Tensor & result, const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor matrix_rank(const Tensor & self, double tol, bool symmetric) const = 0;
  virtual Tensor matrix_rank(const Tensor & self, bool symmetric) const = 0;
  virtual std::tuple<Tensor &,Tensor &> max_out(Tensor & max, Tensor & max_values, const Tensor & self, int64_t dim, bool keepdim) const = 0;
  virtual std::tuple<Tensor,Tensor> max_pool1d_with_indices(const Tensor & self, IntList kernel_size, IntList stride, IntList padding, IntList dilation, bool ceil_mode) const = 0;
  virtual Tensor max_pool1d(const Tensor & self, IntList kernel_size, IntList stride, IntList padding, IntList dilation, bool ceil_mode) const = 0;
  virtual Tensor max_pool2d(const Tensor & self, IntList kernel_size, IntList stride, IntList padding, IntList dilation, bool ceil_mode) const = 0;
  virtual Tensor max_pool3d(const Tensor & self, IntList kernel_size, IntList stride, IntList padding, IntList dilation, bool ceil_mode) const = 0;
  virtual Tensor & mean_out(Tensor & result, const Tensor & self, int64_t dim, bool keepdim, ScalarType dtype) const = 0;
  virtual Tensor & mean_out(Tensor & result, const Tensor & self, int64_t dim, bool keepdim) const = 0;
  virtual Tensor & mean_out(Tensor & result, const Tensor & self, int64_t dim, ScalarType dtype) const = 0;
  virtual std::tuple<Tensor &,Tensor &> median_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim) const = 0;
  virtual std::tuple<Tensor &,Tensor &> min_out(Tensor & min, Tensor & min_indices, const Tensor & self, int64_t dim, bool keepdim) const = 0;
  virtual Tensor mkldnn_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntList padding, IntList stride, IntList dilation, int64_t groups) const = 0;
  virtual Tensor mkldnn_convolution_backward_input(IntList self_size, const Tensor & grad_output, const Tensor & weight, IntList padding, IntList stride, IntList dilation, int64_t groups, bool bias_defined) const = 0;
  virtual std::tuple<Tensor,Tensor> mkldnn_convolution_backward_weights(IntList weight_size, const Tensor & grad_output, const Tensor & self, IntList padding, IntList stride, IntList dilation, int64_t groups, bool bias_defined) const = 0;
  virtual std::tuple<Tensor,Tensor,Tensor> mkldnn_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntList padding, IntList stride, IntList dilation, int64_t groups, std::array<bool,3> output_mask) const = 0;
  virtual std::tuple<Tensor,Tensor,Tensor> miopen_batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double exponential_average_factor, double epsilon) const = 0;
  virtual std::tuple<Tensor,Tensor,Tensor> miopen_batch_norm_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_var, double epsilon) const = 0;
  virtual Tensor miopen_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntList padding, IntList stride, IntList dilation, int64_t groups, bool benchmark, bool deterministic) const = 0;
  virtual Tensor miopen_convolution_backward_input(IntList self_size, const Tensor & grad_output, const Tensor & weight, IntList padding, IntList stride, IntList dilation, int64_t groups, bool benchmark, bool deterministic) const = 0;
  virtual std::tuple<Tensor,Tensor,Tensor> miopen_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntList padding, IntList stride, IntList dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) const = 0;
  virtual Tensor miopen_convolution_backward_bias(const Tensor & grad_output) const = 0;
  virtual Tensor miopen_convolution_backward_weight(IntList weight_size, const Tensor & grad_output, const Tensor & self, IntList padding, IntList stride, IntList dilation, int64_t groups, bool benchmark, bool deterministic) const = 0;
  virtual Tensor miopen_convolution_transpose(const Tensor & self, const Tensor & weight, const Tensor & bias, IntList padding, IntList output_padding, IntList stride, IntList dilation, int64_t groups, bool benchmark, bool deterministic) const = 0;
  virtual std::tuple<Tensor,Tensor,Tensor> miopen_convolution_transpose_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntList padding, IntList output_padding, IntList stride, IntList dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) const = 0;
  virtual Tensor miopen_convolution_transpose_backward_input(const Tensor & grad_output, const Tensor & weight, IntList padding, IntList stride, IntList dilation, int64_t groups, bool benchmark, bool deterministic) const = 0;
  virtual Tensor miopen_convolution_transpose_backward_weight(IntList weight_size, const Tensor & grad_output, const Tensor & self, IntList padding, IntList stride, IntList dilation, int64_t groups, bool benchmark, bool deterministic) const = 0;
  virtual Tensor & mm_out(Tensor & result, const Tensor & self, const Tensor & mat2) const = 0;
  virtual std::tuple<Tensor &,Tensor &> mode_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim) const = 0;
  virtual Tensor & mul_out(Tensor & result, const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & mv_out(Tensor & result, const Tensor & self, const Tensor & vec) const = 0;
  virtual Tensor & ones_out(Tensor & result, IntList size) const = 0;
  virtual Tensor ones_like(const Tensor & self) const = 0;
  virtual Tensor pairwise_distance(const Tensor & x1, const Tensor & x2, double p, double eps, bool keepdim) const = 0;
  virtual Tensor pdist(const Tensor & self, double p) const = 0;
  virtual Tensor _pdist_forward(const Tensor & self, double p) const = 0;
  virtual Tensor _pdist_backward(const Tensor & grad, const Tensor & self, double p, const Tensor & pdist) const = 0;
  virtual Tensor pixel_shuffle(const Tensor & self, int64_t upscale_factor) const = 0;
  virtual Tensor & rand_out(Tensor & result, IntList size) const = 0;
  virtual Tensor & rand_out(Tensor & result, IntList size, Generator * generator) const = 0;
  virtual Tensor rand_like(const Tensor & self) const = 0;
  virtual Tensor & randint_out(Tensor & result, int64_t high, IntList size) const = 0;
  virtual Tensor & randint_out(Tensor & result, int64_t high, IntList size, Generator * generator) const = 0;
  virtual Tensor & randint_out(Tensor & result, int64_t low, int64_t high, IntList size) const = 0;
  virtual Tensor & randint_out(Tensor & result, int64_t low, int64_t high, IntList size, Generator * generator) const = 0;
  virtual Tensor randint_like(const Tensor & self, int64_t high) const = 0;
  virtual Tensor randint_like(const Tensor & self, int64_t low, int64_t high) const = 0;
  virtual Tensor & randn_out(Tensor & result, IntList size) const = 0;
  virtual Tensor & randn_out(Tensor & result, IntList size, Generator * generator) const = 0;
  virtual Tensor randn_like(const Tensor & self) const = 0;
  virtual Tensor & randperm_out(Tensor & result, int64_t n) const = 0;
  virtual Tensor & randperm_out(Tensor & result, int64_t n, Generator * generator) const = 0;
  virtual Tensor & range_out(Tensor & result, Scalar start, Scalar end) const = 0;
  virtual Tensor & range_out(Tensor & result, Scalar start, Scalar end, Scalar step) const = 0;
  virtual std::tuple<Tensor,Tensor> RoiPooling2d_forward(const Tensor & input, const Tensor & rois, int64_t pooledHeight, int64_t pooledWidth, double spatialScale) const = 0;
  virtual Tensor RoiPooling2d_backward(const Tensor & input, const Tensor & rois, int64_t pooledHeight, int64_t pooledWidth, double spatialScale, const Tensor & gradOutput, const Tensor & argmaxes) const = 0;
  virtual Tensor & round_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor rrelu(const Tensor & self, Scalar lower, Scalar upper, bool training, Generator * generator) const = 0;
  virtual Tensor & rrelu_(Tensor & self, Scalar lower, Scalar upper, bool training, Generator * generator) const = 0;
  virtual Tensor & rsqrt_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor selu(const Tensor & self) const = 0;
  virtual Tensor & selu_(Tensor & self) const = 0;
  virtual Tensor celu(const Tensor & self, Scalar alpha) const = 0;
  virtual Tensor & celu_(Tensor & self, Scalar alpha) const = 0;
  virtual Tensor & sigmoid_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor & sin_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor & sinh_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor _softmax(const Tensor & self, int64_t dim, bool half_to_float) const = 0;
  virtual Tensor _softmax_backward_data(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self) const = 0;
  virtual Tensor & _sparse_add_out(Tensor & result, const Tensor & self, const Tensor & other, Scalar alpha) const = 0;
  virtual Tensor & _sparse_dense_add_out(Tensor & result, const Tensor & self, SparseTensorRef other, Scalar alpha) const = 0;
  virtual Tensor & _sparse_div_zerodim_out(Tensor & result, const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & _sparse_div_scalar_out(Tensor & result, const Tensor & self, Scalar other) const = 0;
  virtual Tensor & _sparse_mul_out(Tensor & result, const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & _sparse_mul_zerodim_out(Tensor & result, const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & _sparse_mul_scalar_out(Tensor & result, const Tensor & self, Scalar other) const = 0;
  virtual Tensor & sspaddmm_out(Tensor & result, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor stack(TensorList tensors, int64_t dim) const = 0;
  virtual Tensor & stack_out(Tensor & result, TensorList tensors, int64_t dim) const = 0;
  virtual Tensor _sum(const Tensor & self) const = 0;
  virtual Tensor _sum(const Tensor & self, IntList dim, bool keepdim) const = 0;
  virtual Tensor & sum_out(Tensor & result, const Tensor & self, IntList dim, bool keepdim, ScalarType dtype) const = 0;
  virtual Tensor & sum_out(Tensor & result, const Tensor & self, IntList dim, bool keepdim) const = 0;
  virtual Tensor & sum_out(Tensor & result, const Tensor & self, IntList dim, ScalarType dtype) const = 0;
  virtual Tensor & _sum_out(Tensor & result, const Tensor & self, IntList dim, bool keepdim) const = 0;
  virtual Tensor & _sum_cuda_out(Tensor & result, const Tensor & self, int64_t dim, bool keepdim) const = 0;
  virtual Tensor & sqrt_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor & std_out(Tensor & result, const Tensor & self, int64_t dim, bool unbiased, bool keepdim) const = 0;
  virtual Tensor _prod(const Tensor & self) const = 0;
  virtual Tensor _prod(const Tensor & self, int64_t dim, bool keepdim) const = 0;
  virtual Tensor & prod_out(Tensor & result, const Tensor & self, int64_t dim, bool keepdim, ScalarType dtype) const = 0;
  virtual Tensor & prod_out(Tensor & result, const Tensor & self, int64_t dim, bool keepdim) const = 0;
  virtual Tensor & prod_out(Tensor & result, const Tensor & self, int64_t dim, ScalarType dtype) const = 0;
  virtual Tensor & _prod_out(Tensor & result, const Tensor & self, int64_t dim, bool keepdim) const = 0;
  virtual Tensor & tan_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor & tanh_out(Tensor & result, const Tensor & self) const = 0;
  virtual Tensor tensordot(const Tensor & self, const Tensor & other, IntList dims_self, IntList dims_other) const = 0;
  virtual Tensor _trilinear(const Tensor & i1, const Tensor & i2, const Tensor & i3, IntList expand1, IntList expand2, IntList expand3, IntList sumdim, int64_t unroll_dim) const = 0;
  virtual Tensor triplet_margin_loss(const Tensor & anchor, const Tensor & positive, const Tensor & negative, double margin, double p, double eps, bool swap, int64_t reduction) const = 0;
  virtual Tensor & trunc_out(Tensor & result, const Tensor & self) const = 0;
  virtual std::tuple<Tensor,Tensor> _unique(const Tensor & self, bool sorted, bool return_inverse) const = 0;
  virtual std::tuple<Tensor,Tensor> _unique_dim(const Tensor & self, int64_t dim, bool sorted, bool return_inverse) const = 0;
  virtual Tensor _unsafe_view(const Tensor & self, IntList size) const = 0;
  virtual Tensor & var_out(Tensor & result, const Tensor & self, int64_t dim, bool unbiased, bool keepdim) const = 0;
  virtual Tensor _s_where(const Tensor & condition, const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor norm_except_dim(const Tensor & v, int64_t pow, int64_t dim) const = 0;
  virtual Tensor _weight_norm(const Tensor & v, const Tensor & g, int64_t dim) const = 0;
  virtual std::tuple<Tensor,Tensor> _weight_norm_cuda_interface(const Tensor & v, const Tensor & g, int64_t dim) const = 0;
  virtual std::tuple<Tensor,Tensor> _weight_norm_cuda_interface_backward(const Tensor & grad_w, const Tensor & saved_v, const Tensor & saved_g, const Tensor & saved_norms, int64_t dim) const = 0;
  virtual std::tuple<Tensor,Tensor> _weight_norm_differentiable_backward(const Tensor & grad_w, const Tensor & saved_v, const Tensor & saved_g, const Tensor & saved_norms, int64_t dim) const = 0;
  virtual Tensor & zeros_out(Tensor & result, IntList size) const = 0;
  virtual Tensor zeros_like(const Tensor & self) const = 0;
  virtual Tensor _standard_gamma_grad(const Tensor & self, const Tensor & output) const = 0;
  virtual Tensor _standard_gamma(const Tensor & self, Generator * generator) const = 0;
  virtual Tensor poisson(const Tensor & self, Generator * generator) const = 0;
  virtual Tensor native_norm(const Tensor & self, Scalar p) const = 0;
  virtual Tensor & norm_out(Tensor & result, const Tensor & self, Scalar p, int64_t dim, bool keepdim) const = 0;
  virtual Tensor frobenius_norm(const Tensor & self) const = 0;
  virtual Tensor frobenius_norm(const Tensor & self, IntList dim, bool keepdim) const = 0;
  virtual Tensor & frobenius_norm_out(Tensor & result, const Tensor & self, IntList dim, bool keepdim) const = 0;
  virtual Tensor nuclear_norm(const Tensor & self, bool keepdim) const = 0;
  virtual Tensor & nuclear_norm_out(Tensor & result, const Tensor & self, bool keepdim) const = 0;
  virtual Tensor native_clone(const Tensor & self) const = 0;
  virtual Tensor & native_resize_as_(Tensor & self, const Tensor & the_template) const = 0;
  virtual Tensor & native_pow_out(Tensor & result, const Tensor & self, Scalar exponent) const = 0;
  virtual Tensor native_pow(const Tensor & self, Scalar exponent) const = 0;
  virtual Tensor & pow_out(Tensor & result, const Tensor & self, Scalar exponent) const = 0;
  virtual Tensor & native_zero_(Tensor & self) const = 0;
  virtual Tensor & sub_out(Tensor & result, const Tensor & self, const Tensor & other, Scalar alpha) const = 0;
  virtual Tensor & s_native_addmm_out(Tensor & result, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor s_native_addmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor & s_native_addmm_(Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor & addmm_out(Tensor & result, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor native_sparse_coo_tensor(IntList size, const TensorOptions & options) const = 0;
  virtual Tensor native_sparse_coo_tensor(const Tensor & indices, const Tensor & values) const = 0;
  virtual Tensor native_sparse_coo_tensor(const Tensor & indices, const Tensor & values, IntList size) const = 0;
  virtual Tensor sparse_coo_tensor(const Tensor & indices, const Tensor & values) const = 0;
  virtual Tensor sparse_coo_tensor(const Tensor & indices, const Tensor & values, IntList size) const = 0;
  virtual Tensor _native_sparse_coo_tensor_unsafe(const Tensor & indices, const Tensor & values, IntList size) const = 0;
  virtual Tensor _sparse_coo_tensor_unsafe(const Tensor & indices, const Tensor & values, IntList size) const = 0;
  virtual int64_t _dimI(const Tensor & self) const = 0;
  virtual int64_t _dimV(const Tensor & self) const = 0;
  virtual Tensor & hspmm_out(Tensor & result, const Tensor & mat1, const Tensor & mat2) const = 0;
  virtual Tensor hspmm(const Tensor & mat1, const Tensor & mat2) const = 0;
  virtual Tensor & copy_sparse_to_sparse_(Tensor & self, const Tensor & src, bool non_blocking) const = 0;
  virtual int64_t native_get_device(const Tensor & self) const = 0;
  virtual std::vector<Tensor> meshgrid(TensorList tensors) const = 0;
  virtual Scalar _local_scalar_dense(const Tensor & self) const = 0;
  virtual std::tuple<Tensor,Tensor,Tensor> _thnn_fused_lstm_cell(const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & cx, const Tensor & input_bias, const Tensor & hidden_bias) const = 0;
  virtual std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_fused_lstm_cell_backward(const Tensor & grad_hy, const Tensor & grad_cy, const Tensor & cx, const Tensor & cy, const Tensor & workspace, bool has_bias) const = 0;
  virtual std::tuple<Tensor,Tensor> _thnn_fused_gru_cell(const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & hx, const Tensor & input_bias, const Tensor & hidden_bias) const = 0;
  virtual std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_fused_gru_cell_backward(const Tensor & grad_hy, const Tensor & workspace, bool has_bias) const = 0;
  virtual std::tuple<Tensor,Tensor,Tensor> lstm(const Tensor & input, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) const = 0;
  virtual std::tuple<Tensor,Tensor,Tensor> lstm(const Tensor & data, const Tensor & batch_sizes, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) const = 0;
  virtual std::tuple<Tensor,Tensor> gru(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) const = 0;
  virtual std::tuple<Tensor,Tensor> gru(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) const = 0;
  virtual std::tuple<Tensor,Tensor> rnn_tanh(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) const = 0;
  virtual std::tuple<Tensor,Tensor> rnn_tanh(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) const = 0;
  virtual std::tuple<Tensor,Tensor> rnn_relu(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) const = 0;
  virtual std::tuple<Tensor,Tensor> rnn_relu(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) const = 0;
  virtual std::tuple<Tensor,Tensor> lstm_cell(const Tensor & input, TensorList hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) const = 0;
  virtual Tensor gru_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) const = 0;
  virtual Tensor rnn_tanh_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) const = 0;
  virtual Tensor rnn_relu_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) const = 0;
  virtual std::tuple<Tensor,Tensor> _pack_padded_sequence(const Tensor & input, const Tensor & lengths, bool batch_first) const = 0;
  virtual Tensor _pack_padded_sequence_backward(const Tensor & grad, IntList input_size, const Tensor & batch_sizes, bool batch_first) const = 0;
  virtual std::tuple<Tensor,Tensor> _pad_packed_sequence(const Tensor & data, const Tensor & batch_sizes, bool batch_first, Scalar padding_value, int64_t total_length) const = 0;
};

} // namespace at
